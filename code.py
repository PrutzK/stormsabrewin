# Note that infinity can be represented by float('inf') in Python.

################################################################################
# You do not need to implement anything in this section below.

def dist(loc1, loc2):
    xdiff = loc1[0] - loc2[0]
    ydiff = loc1[1] - loc2[1]
    return math.sqrt(xdiff * xdiff + ydiff * ydiff)

import heapq
import itertools
# Borrowed heavily from https://docs.python.org/2/library/heapq.html#priority-queue-implementation-notes
class PriorityQueue:
    def __init__(self):
        self.heap = []
        self.entry_finder = {}
        self.REMOVED = '<removed>'
        self.counter = itertools.count()
        self.num_elements = 0
        self.num_actions = 0

    def add(self, item, priority):
        if item in self.entry_finder:
            self.remove(item)
        count = next(self.counter)
        entry = [priority, count, item]
        self.entry_finder[item] = entry
        heapq.heappush(self.heap, entry)
        self.num_actions += 1
        self.num_elements += 1

    def remove(self, item):
        entry = self.entry_finder.pop(item)
        entry[-1] = self.REMOVED
        self.num_elements -= 1

    def pop(self):
        self.num_actions += 1
        while self.heap:
            priority, count, item = heapq.heappop(self.heap)
            if item is not self.REMOVED:
                self.num_elements -= 1
                del self.entry_finder[item]
                return item, priority
        raise KeyError('Pop from an empty priority queue')

    def head(self):
        priority, count, item = self.heap[0]
        while item is self.REMOVED:
            heapq.heappop(self.heap)
            priority, count, item = self.heap[0]
        return item, priority

    def empty(self):
        return self.num_elements == 0

    # decreases key by removing and re-adding node
    # node must be in the queue
    def decreasekey(self,node,value):
        PriorityQueue.remove(self,node)
        PriorityQueue.add(self,node,value)
        return

    # returns the second smallest priority value in the heap
    # used in bidirectional so I can peek and still access the next lowest value
    def secondMin(self):
        try:
            head,weight = PriorityQueue.pop(self)
            nextHead,nextWeight = PriorityQueue.head(self)
            PriorityQueue.add(self,head,weight)
            return nextWeight
        except:
            return float('inf')


# You do not need to implement anything in this section above.
################################################################################

# TODO: Implement both parts (a) and (b) with this function. If target is None,
# then return a list of tuples as described in part (a). If target is not None,
# then return a path as a list of states as described in part (b).
def dijkstra(n, edges, source, target=None):
    q = PriorityQueue()
    dist, parent = {}, {}
    S = []
    infinity = float('inf')

    dist[source] = 0
    parent[source] = None
    # build the heap
    for v in xrange(0,n):
        if v == source:
            PriorityQueue.add(q, v, dist[v])
        else:
            PriorityQueue.add(q, v, infinity)
            dist[v]=infinity

    while not PriorityQueue.empty(q):
        u,weight = PriorityQueue.pop(q)

        if u == target:
            path = [u]
            par = parent[u]
            while par != None:
                path.insert(0,par)
                par = parent[par]
            return (path,dist[u])

        for v,weight in edges[u]:
            distance = dist[u] + weight
            if distance < dist[v]:
                dist[v] = distance
                parent[v] = u
                PriorityQueue.decreasekey(q,v,distance)
        S.append(u)

    # put in form for output - list of tuples (vertex, dist[vertex], parent)
    output = []
    for vertex in S:
        output.append((vertex, dist[vertex], parent[vertex]))
    return output

# TODO: Implement part (c).
def bidirectional(n, edges, source, target):
    q, q_back = PriorityQueue(), PriorityQueue()
    S, S_back = [], []
    dist, parent = {}, {}
    dist_back, parent_back = {}, {}
    dist[source], dist_back[target] = 0, 0
    parent[source], parent_back[target] = None, None
    infinity = float('inf')

    # build the heap
    for v in xrange(0,n):
        if v == source:
            PriorityQueue.add(q, v, dist[v])
            PriorityQueue.add(q_back, v, infinity)
            dist_back[v] = infinity
        elif v == target:
            PriorityQueue.add(q, v, infinity)
            PriorityQueue.add(q_back, v, dist_back[v])
            dist[v] = infinity
        else:
            PriorityQueue.add(q, v, infinity)
            PriorityQueue.add(q_back, v, infinity)
            dist[v]=infinity
            dist_back[v]=infinity

    # build dictionary of edges to a vertex (for use in backward movement)
    edgesTo = {}
    for u in xrange(0,n):
        for v,weight in edges[u]: #edge points u -> v
            if v in edgesTo:
                edgesTo[v] = edgesTo[v] + [(u,weight)]
            else:
                edgesTo[v] = [(u,weight)]

    while not PriorityQueue.empty(q) and not PriorityQueue.empty(q_back):
        if PriorityQueue.head(q)[1] <= PriorityQueue.head(q_back)[1]:
            S,q,dist,parent = iterate_dijkstra(n, edges, source, target, S, q, dist, parent)
            if target in S:
                par = parent[target]
                output = [target]
                while par != None:
                    output.insert(0,par)
                    par = parent[par]
                return (output,dist[target]) 
        else:
            S_back, q_back, dist_back, parent_back = iterate_dijkstra(n, edgesTo, target, source, S_back, q_back, dist_back, parent_back)
            if source in S_back:
                par = parent_back[source]
                output = [source]
                while par != None:
                    output.apped(par)
                    par = parent[par]
                return (output,dist_back[source]) 

    print "queue ran out", PriorityQueue.empty(q), PriorityQueue.empty(q_back)

# runs a single iteration of dijkstra
def iterate_dijkstra(n, edges, source, target, S, q, dist, parent):
    infinity = float('inf')
    while not PriorityQueue.empty(q):
        u,weight = PriorityQueue.pop(q)
        for v,weight in edges[u]:
            distance = dist[u] + weight
            if distance < dist[v]:
                dist[v] = distance
                parent[v] = u
                PriorityQueue.decreasekey(q,v,distance)
        S.append(u)
        return S,q,dist,parent

# TODO: Implement part (d).
def astar(locs, edges, source, target):
    return

    q = PriorityQueue()
    dist, parent = {}, {}
    S = []
    infinity = float('inf')

    dist[source] = 0
    parent[source] = None
    
    PriorityQueue.add(q, source, 0)

    count = 0
    while not PriorityQueue.empty(q) and count < 50:
        count = count + 1
        u = PriorityQueue.pop(q)
        print u, u[0], u[1]
        weight = Math.sqrt(u[0]*u[0] + u[1]*u[1])
        print weight

        if u == target:
            path = [u]
            par = parent[u]
            while par != None:
                path.insert(0,par)
                par = parent[par]
            return (path,dist[u])

        for x,y in xrange(0,10):
            distance = dist[u] + weight
            if distance < dist[v]:
                dist[v] = distance
                parent[v] = u
                PriorityQueue.decreasekey(q,v,distance)
        S.append(u)

    # put in form for output - list of tuples (vertex, dist[vertex], parent)
    output = []
    for vertex in S:
        output.append((vertex, dist[vertex], parent[vertex]))
    return output




# TESTS
source = 9
target = 2

edges = {0: [(1, 1.44), (4, 0.53), (8, 0.71), (5, 1.02), (9, 1.8), (2, 0.56)], 1: [(3, 0.09), (7, 2.23), (8, 1.49), (4, 1.71)], 2: [(8, 2.86), (1, 2.09), (3, 0.38), (7, 0.7), (5, 0.82), (0, 0.08), (4, 1.52), (6, 2.76)], 3: [(4, 0.37), (8, 3.6), (2, 0.6), (1, 2.96), (9, 0.05), (6, 0.69)], 4: [(7, 1.4), (1, 0.03), (5, 7.22), (6, 0.71)], 5: [], 6: [(1, 1.24), (2, 0.39), (4, 0.4), (3, 0.89), (9, 0.01), (0, 0.09)], 7: [(1, 1.38), (5, 1.64), (6, 0.25), (9, 2.19)], 8: [(7, 0.9), (1, 1.25), (9, 0.64), (6, 1.64)], 9: [(7, 0.66), (6, 0.42), (1, 2.17)]}
# edges = {0: [(1, 1.06), (8, 0.9), (5, 0.14), (4, 3.1)], 1: [(2, 1.81), (5, 1.07), (8, 0.81), (6, 1.6)], 2: [(1, 2.63), (3, 0.21), (5, 0.44), (7, 0.82), (8, 0.06), (0, 0.42), (6, 1.37)], 3: [(4, 3.62), (8, 1.24), (9, 0.24), (2, 0.58), (0, 0.11)], 4: [(5, 0.02), (6, 2.16), (2, 0.44)], 5: [(9, 1.62), (2, 0.59), (3, 2.04), (4, 0.08)], 6: [(0, 0.79), (5, 0.04), (2, 0.03), (1, 0.02), (8, 1.75)], 7: [(1, 1.24), (4, 2.18), (8, 0.36), (9, 0.42), (6, 0.24), (3, 0.29)], 8: [(5, 0.2), (2, 0.13), (3, 3.49), (1, 1.0)], 9: [(2, 0.26), (3, 0.56), (0, 1.61), (1, 0.01)]}

p1 = dijkstra(10, edges, 9, target)
path = bidirectional(10, edges, 9, target)
print p1
print path

# edges = {0: [(1, 1.06), (8, 0.9), (5, 0.14), (4, 3.1)], 1: [(2, 1.81), (5, 1.07), (8, 0.81), (6, 1.6)], 2: [(1, 2.63), (3, 0.21), (5, 0.44), (7, 0.82), (8, 0.06), (0, 0.42), (6, 1.37)], 3: [(4, 3.62), (8, 1.24), (9, 0.24), (2, 0.58), (0, 0.11)], 4: [(5, 0.02), (6, 2.16), (2, 0.44)], 5: [(9, 1.62), (2, 0.59), (3, 2.04), (4, 0.08)], 6: [(0, 0.79), (5, 0.04), (2, 0.03), (1, 0.02), (8, 1.75)], 7: [(1, 1.24), (4, 2.18), (8, 0.36), (9, 0.42), (6, 0.24), (3, 0.29)], 8: [(5, 0.2), (2, 0.13), (3, 3.49), (1, 1.0)], 9: [(2, 0.26), (3, 0.56), (0, 1.61), (1, 0.01)]}
# p1 = dijkstra(10, edges, 9, target)
# print p1
# path = bidirectional(10, edges, 9, target)
# print path

# {0: [(73, 0.386265595031), (93, 0.700532189989), (52, 0.687852047123)], 1: [(30, 0.533011590735), (94, 2.14052503532), (73, 0.161442827436), (20, 2.41981866706), (71, 0.189849828342)], 2: [(45, 0.259132420353), (15, 0.0859953587713), (74, 4.38411136846), (94, 0.519219372309)], 3: [(81, 0.050620356904), (40, 0.920836866317), (47, 0.428757407459)], 4: [(31, 1.98129740195), (63, 0.173837397931), (98, 0.864921141915), (0, 0.0201469189433)], 5: [(86, 0.0883696540068), (39, 1.11335362424), (42, 3.14125016419), (71, 0.94686472727), (10, 1.9160315039), (77, 0.176230243631), (43, 0.0331283218745)], 6: [(21, 0.691332236625), (53, 1.92621270997), (62, 1.28037755356), (78, 1.89612165124)], 7: [(35, 1.48608755344), (56, 1.64069174547), (65, 1.13789798117), (16, 0.323056518354), (54, 2.5101871208), (36, 0.889186781038), (96, 1.62859482503)], 8: [(20, 0.549715241969), (17, 0.503398152674), (70, 0.81280071084), (7, 0.749860642618), (14, 2.79438418634), (28, 0.217769424605)], 9: [(98, 4.18020988974), (86, 3.84696520535)], 10: [(11, 0.861057813747), (24, 0.714657511918), (12, 0.280240640308), (30, 0.634976528853), (33, 0.553262151668)], 11: [(57, 0.564098976737), (76, 0.519867638403), (48, 0.199189696299), (33, 1.29255575609), (16, 1.24104347502), (88, 1.11682566209), (31, 1.17482816556)], 12: [(83, 0.0978729011277), (43, 0.137387422523)], 13: [(89, 0.570346643575), (62, 0.615408696318), (44, 1.24510045716)], 14: [(75, 1.23754499376), (93, 0.266548747139), (10, 3.37306508301), (99, 0.152819433397), (36, 1.2554615174), (65, 1.42121903099), (4, 0.125535164305)], 15: [(20, 1.37371815501), (58, 0.227423532047), (68, 4.95058640728), (77, 0.104057567432)], 16: [(35, 0.790955715319), (89, 1.33161690889)], 17: [(95, 1.45752966929), (3, 3.53908284346), (47, 0.162424408912), (85, 0.0457932159048), (67, 0.477262982638), (9, 1.03595758097), (0, 0.050689267057)], 18: [(23, 0.837173333666), (34, 1.05123770893), (60, 0.562398250475)], 19: [(30, 4.45658794475), (93, 2.5360609528), (4, 1.94825348866), (13, 0.677304876878)], 20: [(13, 0.267306901243), (89, 0.184422822019), (66, 1.20009233661), (72, 0.57425176456), (42, 1.67719181076)], 21: [(16, 2.86793108754), (45, 0.07329575991), (87, 0.792995372825), (97, 3.28654106429), (94, 0.0969337879295), (13, 2.64397909179), (50, 0.308618911056)], 22: [(45, 0.930740165586), (24, 1.15884991015), (98, 1.30085029734)], 23: [(37, 2.06390206843), (11, 1.18939306096), (30, 0.92982494577), (63, 1.77118724954), (50, 0.0702672024719)], 24: [(95, 1.01488459662), (66, 0.0075776285109), (86, 0.198761466263), (3, 1.00075794151), (5, 0.379937654025), (97, 0.521203308775)], 25: [(44, 0.70358186682), (38, 5.49544334417)], 26: [(65, 0.169861995021), (66, 0.961307265121), (79, 5.07672926663), (13, 1.72068783119), (75, 0.335785238664), (27, 0.227878091258), (88, 0.733711427607), (77, 0.487560644859), (81, 0.0408699962357)], 27: [(63, 0.387637567931), (96, 2.12617548894), (56, 0.171826715044), (68, 0.855680887563), (98, 1.0742004037)], 28: [(57, 3.2374018564), (24, 0.531897580649), (64, 1.66635082568), (94, 0.156585452171), (3, 1.49967399708)], 29: [(87, 0.250217806245), (61, 3.12655093215), (92, 0.720842208931)], 30: [(13, 1.11924859078), (64, 0.361082298204), (44, 1.49845061423), (15, 0.249142048405), (58, 0.289696428654), (71, 1.44653491838), (19, 0.0361114231581)], 31: [(77, 1.52004870639), (83, 0.173503028397), (56, 1.1141060444), (13, 0.976313085751)], 32: [(81, 1.33414391219), (60, 1.99723203589), (31, 0.532613177736), (87, 1.32795818768), (6, 0.0111893609141), (14, 1.80448488581), (45, 0.067750245944), (94, 0.0619633502947), (29, 0.0962740515579)], 33: [(62, 1.07369525378), (72, 1.20627049723), (79, 1.79721832054), (23, 0.889968789939), (90, 0.618551392866)], 34: [(71, 1.80665925706), (91, 1.04539320896), (1, 0.661452223785), (35, 1.37930015181), (25, 0.283070409958), (40, 1.13287623169), (63, 0.113375496232)], 35: [(50, 1.10483253252)], 36: [(74, 0.495772941196), (9, 1.94603622764), (33, 2.50016033943), (64, 0.53981343282), (69, 0.143724853793)], 37: [(53, 0.234170171575), (11, 0.23630181164), (57, 2.23152167751), (36, 2.78934225076), (49, 0.0429586960151), (5, 0.398888116211), (52, 0.484916265722)], 38: [(41, 0.178456899014), (39, 0.977204786569), (55, 2.09171246367), (61, 2.5764332389)], 39: [(35, 1.49967614746), (47, 0.00830358586628)], 40: [(36, 0.487564291535), (56, 1.00756856788), (80, 1.02580162585)], 41: [(63, 0.500634593603), (50, 3.81370193736), (2, 0.0780917803834), (67, 1.63110467361)], 42: [(87, 0.701382001501), (57, 2.30044181589), (17, 2.76187158851), (47, 1.51408146503)], 43: [(20, 0.397217803203), (95, 0.934301900446), (40, 0.711417739639), (46, 0.926846822922), (0, 0.565114654637), (88, 0.474206147252)], 44: [(89, 2.20090230215), (97, 0.348445309813), (17, 1.20473769874), (7, 0.819719928882)], 45: [(29, 0.164521089556), (47, 0.705608664048), (50, 1.03117979128), (85, 0.360936501625), (3, 1.19705071926)], 46: [(78, 0.106566479416), (62, 1.07513455442), (77, 0.640221839135)], 47: [(6, 0.405290990622)], 48: [(98, 1.50636474833), (36, 0.496488647692), (16, 0.213113895541), (6, 0.726990422907), (52, 0.826038229253), (30, 0.816900632122)], 49: [(34, 0.0979521253706), (21, 0.174077205421), (88, 0.302522584025), (44, 2.77052398971), (1, 1.58168849487), (47, 0.727681227662)], 50: [(36, 0.791455914336), (43, 0.454711126434), (72, 0.782706040677), (66, 0.605115354913)], 51: [(78, 0.929124316059), (1, 8.00662988438), (27, 0.927627564171), (61, 0.450678447265), (29, 1.57281684757), (40, 0.0105030936785), (12, 0.527808318871), (62, 0.154511907784)], 52: [(92, 2.2497567033), (26, 0.356503119855), (69, 0.0364656488688), (14, 0.283681863301), (17, 1.07212218821), (5, 0.440838088081), (78, 1.03180402048), (67, 2.55046305204), (74, 0.0992966478421)], 53: [(24, 0.253968541225), (99, 0.379986855449), (12, 0.214838801325), (74, 0.974163196129), (52, 0.301482350951), (60, 0.155451302302), (36, 0.216568245139)], 54: [(67, 0.815979064599), (25, 0.0959022145198), (76, 0.410803795993), (58, 0.280947452004), (82, 1.78936486594), (7, 1.22442719853), (59, 0.154135392161), (92, 1.20124339508), (21, 0.421311604855)], 55: [(84, 0.886274969253), (77, 1.52767112243), (70, 0.477357063582), (41, 0.270787378606), (12, 3.96465070777), (51, 1.39473910238)], 56: [(75, 0.861187883063), (55, 0.224938998102), (25, 0.880085375222), (51, 1.3816885782), (42, 0.199431943361), (63, 0.388523109179), (33, 1.79193176788)], 57: [(1, 0.177593379594), (89, 0.220095657155), (76, 2.11749113766)], 58: [(60, 0.161207134227), (42, 0.236066692623), (97, 1.5270616846), (1, 3.42219180755), (9, 0.231076152891)], 59: [(20, 1.27566030325), (3, 1.38579037535)], 60: [(20, 0.376937633957), (61, 1.1941201356), (49, 0.0338395528595), (16, 0.858722865837), (73, 1.2838674232), (75, 0.444998352026), (7, 0.596347634166)], 61: [(86, 0.743804675451), (97, 0.215707483527)], 62: [(17, 2.87929948022), (39, 0.814993136163)], 63: [(17, 2.70215334472), (6, 0.936940398666), (85, 0.331364499185), (98, 1.0214946299), (3, 2.98276390745)], 64: [(82, 0.252900760496), (32, 0.0691131240831), (13, 1.93678294467)], 65: [(42, 2.02171112252), (89, 3.29261068911)], 66: [(92, 0.65368594111), (24, 1.89919358109), (38, 1.54464462278), (80, 0.341874368667), (68, 1.11637582763), (50, 1.09873211032), (32, 1.86625755254)], 67: [(28, 0.924096810172), (97, 1.30473983574), (54, 0.982536396582), (33, 2.08200408324), (45, 1.88448833463), (69, 0.504894588596)], 68: [(93, 0.514502315296), (46, 0.656945332698), (82, 0.173162443397), (39, 1.08966048892), (9, 0.434181483902), (75, 0.551873774095)], 69: [(46, 1.81238521688), (11, 0.022402985159), (20, 1.21729947923), (54, 0.114009739612), (26, 0.613746799859), (65, 0.335031910175), (41, 0.0394102094995)], 70: [(74, 2.25183525598), (81, 1.25884688694), (40, 0.277163920971), (26, 1.22125837489), (56, 0.775431838525), (3, 1.56147181931), (53, 0.329244750846)], 71: [(34, 0.425542332932), (56, 1.5785396646)], 72: [(96, 0.104562901988), (94, 0.672511373412), (74, 0.977189229706), (7, 6.59410083187)], 73: [(20, 2.127252246), (48, 0.887305580127), (56, 1.22171211814), (18, 1.00947847645), (5, 0.913571880242), (43, 0.214752832111)], 74: [(26, 0.0362531493043), (84, 0.468035382761), (23, 1.16412059487), (1, 1.45457179593), (22, 1.01047335542), (29, 1.1007634197), (56, 1.38089755495), (5, 0.89484988175), (61, 0.123985210032), (71, 0.130938756243)], 75: [(42, 0.633990567177), (47, 1.72298933962), (70, 1.97485287281)], 76: [(49, 0.407009386811), (74, 0.663414463839), (73, 1.1592804687), (29, 2.65399917177)], 77: [(1, 0.877723362702), (66, 1.16372110119), (65, 1.35525649784)], 78: [(67, 0.249176220068), (14, 0.653854982953), (86, 0.0504376710304), (74, 0.867886197799)], 79: [(72, 1.36409188629), (43, 0.0385590906849), (99, 2.00411262946), (24, 0.603241271802), (11, 1.69316306334), (26, 0.0156688720826), (54, 0.339217975495)], 80: [(42, 0.56190888902), (41, 0.0924368483278), (73, 1.76004350978), (17, 2.30624290436), (95, 0.806575177923), (62, 0.686305679509)], 81: [(78, 0.186709631033), (96, 0.0822122734139), (86, 0.126165618403), (32, 0.198953591887), (22, 0.214056137672), (76, 2.16700417447)], 82: [(20, 2.51991755165), (98, 0.529345337317), (57, 0.222161488754), (16, 1.30534724574)], 83: [(59, 0.0303423703744), (57, 1.3081589344), (46, 1.50043433087), (95, 1.14494919656), (49, 0.215594656346)], 84: [(82, 0.0837367626241), (98, 0.31187373931), (79, 0.268775891572), (8, 1.49873300312)], 85: [(98, 0.998132753502), (50, 0.506367874934), (88, 0.707021234052), (55, 1.38699400638), (59, 0.771359930608)], 86: [(37, 1.23113766961), (44, 1.66120383814), (76, 0.333726951467), (63, 0.170519843157), (73, 1.37607650538), (92, 0.741517725516)], 87: [(0, 1.69240171544), (60, 2.39518674321)], 88: [(8, 0.751484062359), (34, 0.467116370683), (86, 0.153720037649), (37, 0.783465150583), (71, 0.211312553235), (35, 1.7799628966), (31, 2.05990444265), (53, 0.434542637568), (91, 0.334825604419), (62, 1.25871320866), (1, 0.0219152579006)], 89: [(18, 1.12819994604), (83, 0.0785749938836), (26, 1.02535202939), (11, 1.00042421781), (87, 0.181886043292)], 90: [(12, 0.0992565279057), (35, 1.7912751557), (83, 0.330539231067), (18, 2.29604284786), (16, 1.34954357437), (74, 0.257397112143), (59, 0.531181791245)], 91: [(63, 0.473233893203), (0, 0.800576592633), (93, 0.49069232589), (81, 1.78370748089)], 92: [(49, 0.448047366631), (94, 0.118511588185), (28, 0.567918920815), (98, 2.02961406954)], 93: [(58, 1.97982232099), (57, 0.106805130555), (56, 0.143883628449), (12, 1.8438123822), (43, 0.798592242722)], 94: [(9, 0.316491769122), (10, 0.00436750344358), (50, 1.97546700176), (39, 0.603657418701)], 95: [(99, 0.317915763457), (45, 1.68433008931), (75, 0.178836707467), (97, 0.835182296216), (61, 1.94518659639), (37, 0.417544825075), (17, 0.317077391872)], 96: [(58, 2.82455742302), (49, 0.400517189271), (94, 0.788093427869)], 97: [(90, 0.033584690215), (35, 0.593011085657), (38, 2.25097017018), (76, 0.0954664354538)], 98: [(59, 0.692311284423), (63, 1.73456578596), (9, 0.337026952917)], 99: [(51, 0.441291331312), (97, 0.140807538853), (10, 2.04951282327)]}
# dijkstra med (n: 100, source: 78, # edges: 487)
# Test 3 passed!
